{"version":3,"sources":["component/Cards/Cards.module.css","component/Cards/Cards.jsx","Api/index.js","component/Chart/Chart.jsx","component/Country/CountyPicker.jsx","App.js","index.js","component/Chart/Chart.module.css","component/Country/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","Number","value","duration","Date","toDateString","url","fetchData","country","a","changeable","axios","get","fetchDailyData","modifydata","map","dailydata","total","date","reportDate","console","log","FetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChar","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFethcedCountries","FetchAPi","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.45fbb926.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__qm3qx\",\"card\":\"Cards_card__2ECdy\",\"infected\":\"Cards_infected__3R80g\",\"recovered\":\"Cards_recovered__1Raks\",\"deaths\":\"Cards_deaths__Bl-HR\"};","import React from 'react';\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\r\nimport CountUp from'react-countup';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames'; \r\nconst Cards=({data:{confirmed,recovered,deaths,lastUpdate}})=>{\r\n   \r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                 <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                     <CardContent>\r\n                         <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                         </Typography>\r\n                         <Typography variant=\"h5\">\r\n                           <CountUp \r\n                           start={0}\r\n                           end={Number(confirmed.value)}\r\n                           duration={2.5}  />\r\n                         </Typography>\r\n                         <Typography color=\"textSecondary\">\r\n                            {\r\n                               new Date(lastUpdate).toDateString()\r\n                            }\r\n                         </Typography>\r\n                         <Typography variant=\"body2\">\r\n                            Number of active cases of Covid-19  \r\n                         </Typography>\r\n                     </CardContent>\r\n                 </Grid>\r\n                 <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                     <CardContent>\r\n                         <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                         </Typography>\r\n                         <Typography variant=\"h5\">\r\n                         <CountUp \r\n                           start={0}\r\n                           end={Number(recovered.value)}\r\n                           duration={2.5}  />\r\n                         </Typography>\r\n                         <Typography color=\"textSecondary\">\r\n                         {\r\n                               new Date(lastUpdate).toDateString()\r\n                            }\r\n                         </Typography>\r\n                         <Typography variant=\"body2\">\r\n                            Number of recoveries from Covid-19  \r\n                         </Typography>\r\n                     </CardContent>\r\n                 </Grid>\r\n                 <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                     <CardContent>\r\n                         <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                         </Typography>\r\n                         <Typography variant=\"h5\">\r\n                         <CountUp \r\n                           start={0}\r\n                           end={Number(deaths.value)}\r\n                           duration={2.5}  />\r\n                         </Typography>\r\n                         <Typography color=\"textSecondary\">\r\n                         {\r\n                               new Date(lastUpdate).toDateString()\r\n                            }\r\n                         </Typography>\r\n                         <Typography variant=\"body2\">\r\n                            Number of deaths caused by Covid-19  \r\n                         </Typography>\r\n                     </CardContent>\r\n                 </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url='https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData=async(country)=>{\r\n    let changeable=url;\r\n    if(country){\r\n        changeable=`${url}/countries/${country}`\r\n    }else{\r\n        changeable=url\r\n    }\r\n    try{\r\n        const {data:{confirmed,recovered,deaths,lastUpdate}}=await axios.get(changeable);\r\n        \r\n        return {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n};        \r\n    }\r\n    catch(error){};\r\n}\r\n\r\nexport const fetchDailyData=async()=>{\r\n    try{\r\n        const {data}= await axios.get(`${url}/daily`)\r\n        const modifydata=data.map((dailydata)=>({\r\n            confirmed:dailydata.confirmed.total,\r\n            deaths:dailydata.deaths.total,\r\n            date:dailydata.reportDate\r\n        }));\r\n\r\n        return modifydata\r\n    }\r\n \r\n    catch(error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const FetchCountries=async()=>{\r\n    try{\r\n        const {data:{countries}}=await axios.get(`${url}/countries`)\r\n        return (countries.map((country)=>country.name ))\r\n    }\r\n    catch(error){\r\n        console.log(error)\r\n    }\r\n}","import React,{useState,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../Api'\r\nimport {Line,Bar} from 'react-chartjs-2'\r\nimport styles from './Chart.module.css';\r\nconst Chart=({data:{confirmed,recovered,deaths},country})=>{\r\n    const [dailyData,setDailyData]=useState({})\r\n    useEffect(()=>{\r\n        const fetchApi=async()=>{\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n    fetchApi();\r\n    },[dailyData]);\r\n\r\n    const lineChart=(\r\n        dailyData.length?(\r\n        <Line data={{\r\n            labels:dailyData.map(({date})=>date),\r\n            datasets:[{\r\n                data:dailyData.map(({confirmed})=>confirmed),\r\n                label:'infected',\r\n                borderColor:'#3333ff',\r\n                fill:true,\r\n            },{\r\n                data:dailyData.map(({deaths})=>deaths),\r\n                label:'Deaths',\r\n                borderColor:'red',\r\n                backgroundColor:'rgba(255,0,0,0.5)',\r\n                fill:true,\r\n\r\n            }],\r\n        }\r\n        } />\r\n    ):null\r\n    )\r\n    const barChar=(\r\n        confirmed?(\r\n            <Bar \r\n                data={{\r\n                    labels:['Infected','Recovered','Deaths'],\r\n                    datasets:[{\r\n                        label:'People',\r\n                        backgroundColor:[\r\n                            'rgba(0,0,255,0.5)',\r\n                            'rgba(0,255,0 ,0.5)',\r\n                            'rgba(255,0,255,0.5)',\r\n                        ],\r\n                        data:[confirmed.value,recovered.value,deaths.value]\r\n\r\n                    }]\r\n\r\n                }}\r\n                options={{\r\n                    legend:{display:false},\r\n                    title:{display:true,text:`Current state in ${country}`}\r\n                }}\r\n            />\r\n        ):null\r\n    )\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            {country?barChar:lineChart}\r\n        </div>\r\n    )\r\n}\r\nexport default Chart;","import React,{useState,useEffect} from 'react';\r\nimport styles from './CountryPicker.module.css';\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport {FetchCountries} from '../../Api'\r\nconst CountryPicker=({handleCountryChange})=>{\r\n    const [fetchedCountries,setFethcedCountries] =useState([]);\r\n    useEffect(()=>{\r\n        const FetchAPi=async()=>{\r\n            setFethcedCountries(await FetchCountries())\r\n        }\r\n        FetchAPi()\r\n        \r\n    },[setFethcedCountries])\r\n    console.log(fetchedCountries)\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}  >\r\n                <option value='global'>global</option>\r\n    {fetchedCountries.map((country,i)=><option value={country} key={i}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker;","import React from 'react';\r\nimport {Cards,Chart,CountryPicker} from './component'\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './Api';\r\n class App extends React.Component{\r\n    state ={\r\n        data:{confirmed:{value:\"\"},recovered:{value:''},deaths:{value:''},lastUpdate:''},\r\n        country:'' \r\n    };\r\n    async componentDidMount(){\r\n        const fetchedData =await fetchData();\r\n        this.setState({data:fetchedData});\r\n  \r\n      \r\n    }\r\n    handleCountryChange=async(country)=>{\r\n        const fetchedData =await fetchData(country);\r\n        this.setState({data:fetchedData,country:country})\r\n        \r\n    }\r\n     render(){\r\n        const {data,country}=this.state\r\n        if(this.state.data===\"\")\r\n        {\r\n            return <div>loading</div>\r\n        }\r\n        else{\r\n         return(\r\n            <div className={styles.container}>\r\n               <Cards data={data} />\r\n               <CountryPicker  handleCountryChange={this.handleCountryChange}/>\r\n               <Chart data={data} country={country}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n };\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './App';\r\nReactDom.render(<App/>,document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1hje3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"CountryPicker_text__2EK12\",\"formControl\":\"CountryPicker_formControl__1Lj_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__wKLpG\"};"],"sourceRoot":""}